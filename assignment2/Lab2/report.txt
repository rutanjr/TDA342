Part I:
Question: why is it not possible to make your transformer an instance of MonadTrans?

The type of (ReplayT m q r a) does not allow i to become a part of MonadTrans since the monad transofmer is required to be of the form (t m a) where t is the monad transformer. Since ReplayT does not fullfill this it cannot be and instance of MonadTrans.

If we wrap ReplayT inside another monad called ReplayT' such that

   newtype ReplayT' q r m a = MkReplayT (ReplayT m q r a)

we solve the problem with the type parameters being in the wrong order. However when we try to make this an instance of MonadTrans we ecounter another error. Our definition of lift is liftR and its type signature looks like

   liftR :: (Monad m, Show a, Read a) => m a -> ReplayT m q r a

Here we impose an extra coniftion on a, namely that it is an instance of Show and Read. This is due to liftR merely being

     liftR = ActionBind ma Return

and we have to be able to read and write the results to our Trace. So we can not make ReplayT an instance of MonadTrans even if we change the order of the type arguments.

We also have the problem of our liftR not fufilling the laws required for ReplayT to be an instance of MonadTrans. The two laws are

     lift . return = return
     lift (m >>= f) = lift m >>= (lift . f)

These are not satisfied. We can take a simple program as a counterexample. Consider the two programs

    prog_lift = liftR (return () >>= const (return ()))
    prog_bind = liftR (return ()) >>= liftR . return

If the law holds these two should be the same and we would be able to interchange them without problem. However running these two with a question after like

   runReplayT (prog_lift >> ask "")
   runReplayT (prog_bind >> ask "")

will produce different traces since in 'prog_lift' we only save one computational result and in 'prog_bind' two. So we cannot exchange the programs and use the other programs trace and thus they cannot be equal.
